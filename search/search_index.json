{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"NixOS Config Documentation View source code at: https://github.com/Cryxtalix/NixOS-config Index Documentation Helpful bash aliases How to install Nix package manager on other distros How to setup a basic SSH git server","title":"Home"},{"location":"#nixos-config-documentation","text":"View source code at: https://github.com/Cryxtalix/NixOS-config","title":"NixOS Config Documentation"},{"location":"#index","text":"Documentation Helpful bash aliases How to install Nix package manager on other distros How to setup a basic SSH git server","title":"Index"},{"location":"bash_aliases/","text":"Some helpful bash aliases Here are some bash aliases to simplify performing NixOS cli functions. They are defined in the packages/bash.nix file. To update flake: $ nix-flake-up To upgrade system packages: $ nix-system-up <system_profile_name> To upgrade home packages: $ nix-home-up <home_profile_name> Or to update and upgrade entire system: For NixOS systems: $ nix-full-up <system_profile_name> <home_profile_name> For Nix Package Manager systems: $ nix-full-up <home_profile_name> To collect garbage and free resources from nix-store: $ nix-cg To start development environment: Convenient env, use dev templates for project specific envs $ nix-dev <choice_of_language>","title":"Bash aliases"},{"location":"bash_aliases/#some-helpful-bash-aliases","text":"Here are some bash aliases to simplify performing NixOS cli functions. They are defined in the packages/bash.nix file.","title":"Some helpful bash aliases"},{"location":"bash_aliases/#to-update-flake","text":"$ nix-flake-up","title":"To update flake:"},{"location":"bash_aliases/#to-upgrade-system-packages","text":"$ nix-system-up <system_profile_name>","title":"To upgrade system packages:"},{"location":"bash_aliases/#to-upgrade-home-packages","text":"$ nix-home-up <home_profile_name>","title":"To upgrade home packages:"},{"location":"bash_aliases/#or-to-update-and-upgrade-entire-system","text":"For NixOS systems: $ nix-full-up <system_profile_name> <home_profile_name> For Nix Package Manager systems: $ nix-full-up <home_profile_name>","title":"Or to update and upgrade entire system:"},{"location":"bash_aliases/#to-collect-garbage-and-free-resources-from-nix-store","text":"$ nix-cg","title":"To collect garbage and free resources from nix-store:"},{"location":"bash_aliases/#to-start-development-environment","text":"Convenient env, use dev templates for project specific envs $ nix-dev <choice_of_language>","title":"To start development environment:"},{"location":"code_doc/","text":"Documentation Nix Flake File: flake.nix , flake.lock flake.nix describes the inputs and outputs of the project. Inputs list any files or repositories that the project downloads. Outputs list the results of the project, such as NixOS configurations, Home-Manager configurations and development environments. flake.lock stores the hashes of inputs, ensuring that the specific package version used is identified. This essentially locks dependencies. If input hashes are specified in flake.nix , the hash in flake.lock will be overridden. NixOS Configurations File: /hosts/system/[profile]/*.nix Describes the state of the system, including hardware settings and system packages. default.nix imports modules from modules/ folder and writes their configurations. packages.nix lists packages to be installed system wide and enables some system apps and services. hardware-configuration.nix contains hardware configurations automatically generated by the system with nixos-generate-config and shouldn't need to be edited. When moving to a new machine, a new config can be generated and this file replaced. Home-manager Configurations File: hosts/home/[profile]/*.nix Source: https://github.com/nix-community/home-manager Describes the state of the user environment, with the use of Home-manager. default.nix imports package configurations from packages/ folder and writes other home-manager configurations. packages.nix lists packages to be installed in the user environment. Development Environments File: dev-envs/*.nix Creates shells for development purposes, such as installing the required packages and creating shell aliases and scripts. Sops-nix File: .sops.yaml , user/[profile]/secrets.yaml , modules/system.nix Source: https://github.com/Mic92/sops-nix Secret provisioning system that allows storing encrypted secrets in the repository. .sops.yml configures the location of the public key and its owner. secret.yaml is where secrets are written and must be decrypted with the sops program and the secret key before editing. system.nix configures the location of the secrets.yaml source file, and the decrypting secret key. GitHub Workflows File: .github/workflows/*.yml GitHub workflow configuration. Currently test.yml runs nix flake check --no-build each time the master branch recieves a commit, while the ci.yml deploys this GitHub Pages site. MkDocs File: mkdocs.yml , docs/*.md , dev-envs/mkdocs.nix Source: https://github.com/mkdocs/mkdocs Generates project documentation site with markdown. mkdocs.yml configures the structure of the site. Markdown files in docs/ folder are the pages. mkdocs.nix is the development environment for working with mkdocs. User Settings File: user/[profile]/* User settings are stored here under different profile names, such that new hostnames can be created for different users. Do not edit the files to change users. Add new folders and change the user_profile variable in nixosConfigurations and homeConfigurations. default.nix stores user data. secrets.yaml stores encrypted secrets used by sops-nix. users.nix creates your user account user(or even multiple users). Wallpapers File: user/[profile]/default.nix , flake.nix Source: https://github.com/Cryxtalix/Wallpapers Automatically adds wallpapers to GNOME desktop environment from personal GitHub repo. default.nix stores the name of the wallpaper to be used(needs to present in the repo). flake.nix contains source url of the wallpaper repo, and could be changed to a different wallpaper source. Bash Aliases File: packages/bash.nix , dev-envs/*.nix Convenient bash aliases to shorten long commands. Aliases are in bash.nix shellAliases and initExtra sections will be always be active. Aliases in dev-envs/*.nix shellHook sections will only be active when the corresponding development environment is activated. SSH Git Server File: modules/git-daemon.nix , keys/* Creates an SSH git server that accepts public keys from keys/ folder. Module has to be imported to a nixos configuration and enabled. Read here for detailed instructions","title":"Code documentation"},{"location":"code_doc/#documentation","text":"","title":"Documentation"},{"location":"code_doc/#nix-flake","text":"File: flake.nix , flake.lock flake.nix describes the inputs and outputs of the project. Inputs list any files or repositories that the project downloads. Outputs list the results of the project, such as NixOS configurations, Home-Manager configurations and development environments. flake.lock stores the hashes of inputs, ensuring that the specific package version used is identified. This essentially locks dependencies. If input hashes are specified in flake.nix , the hash in flake.lock will be overridden.","title":"Nix Flake"},{"location":"code_doc/#nixos-configurations","text":"File: /hosts/system/[profile]/*.nix Describes the state of the system, including hardware settings and system packages. default.nix imports modules from modules/ folder and writes their configurations. packages.nix lists packages to be installed system wide and enables some system apps and services. hardware-configuration.nix contains hardware configurations automatically generated by the system with nixos-generate-config and shouldn't need to be edited. When moving to a new machine, a new config can be generated and this file replaced.","title":"NixOS Configurations"},{"location":"code_doc/#home-manager-configurations","text":"File: hosts/home/[profile]/*.nix Source: https://github.com/nix-community/home-manager Describes the state of the user environment, with the use of Home-manager. default.nix imports package configurations from packages/ folder and writes other home-manager configurations. packages.nix lists packages to be installed in the user environment.","title":"Home-manager Configurations"},{"location":"code_doc/#development-environments","text":"File: dev-envs/*.nix Creates shells for development purposes, such as installing the required packages and creating shell aliases and scripts.","title":"Development Environments"},{"location":"code_doc/#sops-nix","text":"File: .sops.yaml , user/[profile]/secrets.yaml , modules/system.nix Source: https://github.com/Mic92/sops-nix Secret provisioning system that allows storing encrypted secrets in the repository. .sops.yml configures the location of the public key and its owner. secret.yaml is where secrets are written and must be decrypted with the sops program and the secret key before editing. system.nix configures the location of the secrets.yaml source file, and the decrypting secret key.","title":"Sops-nix"},{"location":"code_doc/#github-workflows","text":"File: .github/workflows/*.yml GitHub workflow configuration. Currently test.yml runs nix flake check --no-build each time the master branch recieves a commit, while the ci.yml deploys this GitHub Pages site.","title":"GitHub Workflows"},{"location":"code_doc/#mkdocs","text":"File: mkdocs.yml , docs/*.md , dev-envs/mkdocs.nix Source: https://github.com/mkdocs/mkdocs Generates project documentation site with markdown. mkdocs.yml configures the structure of the site. Markdown files in docs/ folder are the pages. mkdocs.nix is the development environment for working with mkdocs.","title":"MkDocs"},{"location":"code_doc/#user-settings","text":"File: user/[profile]/* User settings are stored here under different profile names, such that new hostnames can be created for different users. Do not edit the files to change users. Add new folders and change the user_profile variable in nixosConfigurations and homeConfigurations. default.nix stores user data. secrets.yaml stores encrypted secrets used by sops-nix. users.nix creates your user account user(or even multiple users).","title":"User Settings"},{"location":"code_doc/#wallpapers","text":"File: user/[profile]/default.nix , flake.nix Source: https://github.com/Cryxtalix/Wallpapers Automatically adds wallpapers to GNOME desktop environment from personal GitHub repo. default.nix stores the name of the wallpaper to be used(needs to present in the repo). flake.nix contains source url of the wallpaper repo, and could be changed to a different wallpaper source.","title":"Wallpapers"},{"location":"code_doc/#bash-aliases","text":"File: packages/bash.nix , dev-envs/*.nix Convenient bash aliases to shorten long commands. Aliases are in bash.nix shellAliases and initExtra sections will be always be active. Aliases in dev-envs/*.nix shellHook sections will only be active when the corresponding development environment is activated.","title":"Bash Aliases"},{"location":"code_doc/#ssh-git-server","text":"File: modules/git-daemon.nix , keys/* Creates an SSH git server that accepts public keys from keys/ folder. Module has to be imported to a nixos configuration and enabled. Read here for detailed instructions","title":"SSH Git Server"},{"location":"git_server/","text":"SSH Git Server Initial nix setup To run a simple SSH git server, import /modules/git-daemon.nix in your system host of choice. Add a public SSH key for use with the git server into the keys folder, and edit the git-daemon.nix file with the reference to your new public key file. Run the rebuild command. Managing repositories Repositories are stored in the /srv/git folder, which is owned exclusively by the git user. No other user accounts can access that folder, while the git user does not provide any shell access. We do not want users of the git server to make any changes to the server. Therefore we have to use the root account to add/remove repositories. To add a new repository, login to the root user with sudo -i or sudo su . Go to /srv/git and run git init --bare myProject.git to create a blank repo with the same name as your project. The myProject.git folder and all the files within are currently owned by root and cannot be accessed by the git user, so we run chown -R git:git myProject.git/ to change ownership to the git user. Back in our project folder, add a new git remote by running git remote add home git@[server_ip]:/srv/git/myProject.git , where \"home\" is the name we choose for this remote. Alternatively, we can edit the .git/config file inside the project folder. Finally, run git push home [branch_name] and the project will be pushed to the git server. To remove a repository, simply delete the myProject.git folder at /srv/git as root.","title":"Running an SSH git server"},{"location":"git_server/#ssh-git-server","text":"","title":"SSH Git Server"},{"location":"git_server/#initial-nix-setup","text":"To run a simple SSH git server, import /modules/git-daemon.nix in your system host of choice. Add a public SSH key for use with the git server into the keys folder, and edit the git-daemon.nix file with the reference to your new public key file. Run the rebuild command.","title":"Initial nix setup"},{"location":"git_server/#managing-repositories","text":"Repositories are stored in the /srv/git folder, which is owned exclusively by the git user. No other user accounts can access that folder, while the git user does not provide any shell access. We do not want users of the git server to make any changes to the server. Therefore we have to use the root account to add/remove repositories. To add a new repository, login to the root user with sudo -i or sudo su . Go to /srv/git and run git init --bare myProject.git to create a blank repo with the same name as your project. The myProject.git folder and all the files within are currently owned by root and cannot be accessed by the git user, so we run chown -R git:git myProject.git/ to change ownership to the git user. Back in our project folder, add a new git remote by running git remote add home git@[server_ip]:/srv/git/myProject.git , where \"home\" is the name we choose for this remote. Alternatively, we can edit the .git/config file inside the project folder. Finally, run git push home [branch_name] and the project will be pushed to the git server. To remove a repository, simply delete the myProject.git folder at /srv/git as root.","title":"Managing repositories"},{"location":"installing_nix_pm/","text":"Installing nix package manager on another distro We can still get a lot of the reproducibility of NixOS on other distros simply by installing Nix, not as the operating system but as a third party package manager. Together with Home Manager , we can configure almost any user apps and make any changes to files and folders in the home folder. Install the Nix package manager with install script from https://zero-to-nix.com/start/install : curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install . Restart shell and add home-manager channel: nix-channel --add https://github.com/nix-community/home-manager/archive/release-23.11.tar.gz home-manager Update nix-channels: nix-channel --update Install home-manager: nix-shell '<home-manager>' -A install Create folder: mkdir ~/.config/nix Create config file: echo \"experimental-features = nix-command flakes\" >> ~/.config/nix/nix.conf Download this configuration: git clone https://github.com/Cryxtalix/NixOS-config && cd ~/NixOS-config Or follow the link and download the files manually and unzip. Change the configuration to your liking, such as changing settings in /packages/git.nix, editing installed apps in /hosts/home/profile, or even creating new profiles! Be sure to add any new profiles in flake.nix. git add -A if you used git clone earlier and created any new files. Finally, install the configuration! home-manager switch -b backup --flake .#<your-home-profile>","title":"Installing nix package manager"},{"location":"installing_nix_pm/#installing-nix-package-manager-on-another-distro","text":"We can still get a lot of the reproducibility of NixOS on other distros simply by installing Nix, not as the operating system but as a third party package manager. Together with Home Manager , we can configure almost any user apps and make any changes to files and folders in the home folder. Install the Nix package manager with install script from https://zero-to-nix.com/start/install : curl --proto '=https' --tlsv1.2 -sSf -L https://install.determinate.systems/nix | sh -s -- install . Restart shell and add home-manager channel: nix-channel --add https://github.com/nix-community/home-manager/archive/release-23.11.tar.gz home-manager Update nix-channels: nix-channel --update Install home-manager: nix-shell '<home-manager>' -A install Create folder: mkdir ~/.config/nix Create config file: echo \"experimental-features = nix-command flakes\" >> ~/.config/nix/nix.conf Download this configuration: git clone https://github.com/Cryxtalix/NixOS-config && cd ~/NixOS-config Or follow the link and download the files manually and unzip. Change the configuration to your liking, such as changing settings in /packages/git.nix, editing installed apps in /hosts/home/profile, or even creating new profiles! Be sure to add any new profiles in flake.nix. git add -A if you used git clone earlier and created any new files. Finally, install the configuration! home-manager switch -b backup --flake .#<your-home-profile>","title":"Installing nix package manager on another distro"}]}